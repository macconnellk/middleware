function middleware(iob, currenttemp, glucose, profile, autosens, meal, reservoir, clock, pumphistory, preferences, basalprofile, tdd, tdd_averages) {

    function round(value, digits) {
        if (! digits) { digits = 0; }
        var scale = Math.pow(10, digits);
        return Math.round(value * scale) / scale; 
    }

// Change to false if you don't want to use sigmoid ISF adjustment anymore. Sigmoid ISF will not be used when dynamic ISF setting is on. 
    const enable_sigmoid = true;
   
// Is dynamic ISF enabled?
    const dyn_enabled = profile.enableChris;
    const current_bg = glucose[0].glucose;
    const as_min = profile.autosens_min;
    const autosens_interval = profile.autosens_max - as_min;
    
// DYNISF SIGMOID MODIFICATION #1
// Account for delta in TDD of insulin. Define a TDD Factor using a Sigmoid curve that approximates the TDD delta effect used in the Chris Wilson DynISF approach.
// This TDD delta effect is not linear across BGs and requires a curve to mimic.
// ORIGINAL SIGMOID APPROACH: const tdd_factor = tdd_averages.weightedAverage / tdd_averages.average_total_data;

    // Define TDD deviation variable for use in TDD Sigmoid curve based on current percent change between Daily TDD deviation and 2 Week Deviation 
    // This approach will normalize this variable for any TDD value to ensure a standard TDD Factor sigmoid curve for all users
    const tdd_dev = (tdd_averages.weightedAverage / tdd_averages.average_total_data - 1) * 10;

    // Hard-code TDD Factor Sigmoid inputs
    // These inputs have been modeled to create a TDD Factor that, when used in the Sigmoid DynISF function, closely approximates the TDD delta effect for FIASP used in the Chris Wilson (Logarithmic) DynISF approach. 
    // These inputs are not expected to require user change for ultra-rapid insulin
    const TDD_sigmoid_adjustment_factor = .39;
    const TDD_sigmoid_max = 4;
    const TDD_sigmoid_min = .7;

    // Define a TDD Factor Sigmoid curve using same method as the DynISF Sigmoid approach below
    const TDD_sigmoid_interval = TDD_sigmoid_max - TDD_sigmoid_min
    const TDD_sigmoid_max_minus_one = TDD_sigmoid_max - 1;
    const TDD_sigmoid_fix_offset = (Math.log10(1/TDD_sigmoid_max_minus_one - TDD_sigmoid_min / TDD_sigmoid_max_minus_one) / Math.log10(Math.E));
    const TDD_sigoid_exponent = tdd_dev * TDD_sigmoid_adjustment_factor + fix_offset;
    
    // The TDD Factor sigmoid function
    const tdd_factor = TDD_sigmoid_interval / (1 + Math.exp(-TDD_sigoid_exponent)) + TDD_sigmoid_min;

    // DYNISF SIGMOID MODIFICATION #2
    // The TDD delta effect in Chris Wilson (Logarithmic) DynISF approach allows ISF to shift above 100% below target BG (unlike the original Sigmoid approach). 
    // This approach applies the TTD factor to the target BG to allow the new TDD delta approach to mimic the Chris Wilson (Logarithmic) DynISF approach 
    // Like the original Sigmoid approach, Profile ISF will be applied at target but only when Daily TDD = 2 Week TDD. 
    // Blood glucose deviation from set target (the lower BG target) converted to mmol/l to fit current formula. 
    // ORIGINAL SIGMOID APPROACH" const bg_dev = (current_bg - profile.min_bg) * 0.0555;

        const bg_dev = (current_bg - (profile.min_bg / tdd_factor) * 0.0555;


// The Dynamic ISF Sigmoid Code 

    // Reduce to make less aggressive
    const adjustment_factor = profile.adjustmentFactor;
    const max_minus_one = profile.autosens_max - 1;
    
    //Makes sigmoid factor(y) = 1 when BG deviation(x) = 0.
    const fix_offset = (Math.log10(1/max_minus_one-as_min/max_minus_one) / Math.log10(Math.E));
   
    //Exponent used in sigmoid formula
    const exponent = bg_dev * adjustment_factor * tdd_factor + fix_offset;
  
    // The sigmoid function
    const sigmoid_factor = autosens_interval / (1 + Math.exp(-exponent)) + as_min;
    
    //Only use when dynISF setting is off and the constant enable_sigmoid = true.
    if (enable_sigmoid && !dyn_enabled) { 

    // Replace the autosens.ratio with this calculation
        autosens.ratio = sigmoid_factor;
        const normal_cr = profile.carb_ratio;

    // Dynamic CR. Use only when the setting 'Enable Dyanmic CR' is on in FAX Dynamic Settings
        if (autosens.ratio > 1 && profile.enableDynamicCR) {
            profile.carb_ratio /= ((autosens.ratio - 1) / 2 + 1);
        } else if (profile.enableDynamicCR) { profile.carb_ratio /= autosens.ratio; }

        const new_isf = profile.sens/autosens.ratio;
        
        return "Using Middleware function, the autosens ratio has been adjusted with sigmoid factor to: " + round(autosens.ratio, 2) + ". New ISF = " + round(new_isf, 2) + " mg/dl (" + round(0.0555 * new_isf, 2) + " (mmol/l)" + ". CR adjusted from " + round(normal_cr,2) + " to " + round(profile.carb_ratio,2) + " (" + round(0.0555 * profile.carb_ratio, 2) + " mmol/l).";
    } else { return "Nothing changed"; }
}
